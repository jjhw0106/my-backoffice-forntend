## Component Guidelines

### ShadCN Components
- 모든 기본 UI 컴포넌트는 ShadCN을 사용
- 컴포넌트 커스터마이징은 `components/ui` 디렉토리에서 관리
- 테마 설정은 `lib/themes`에서 관리
- 컴포넌트 스타일 수정은 `tailwind.config.ts`에서 관리

### Icons
- 아이콘은 `lucide-react` 패키지 사용
- 커스텀 아이콘은 `components/icons` 디렉토리에 저장
- 아이콘 크기는 16px, 20px, 24px, 32px로 통일
- 아이콘 색상은 테마 시스템을 따름

### Component Structure
```typescript
// 컴포넌트 기본 구조
import { type FC } from 'react'

interface Props {
  // props 타입 정의
}

export const ComponentName: FC<Props> = ({ prop1, prop2 }) => {
  // hooks
  // handlers
  // render helpers

  return (
    // JSX
  )
}
```

## Best Practices

### 파일 구조
```
src/
├── app/                    # App Router
├── components/            # 재사용 컴포넌트
├── lib/                   # 유틸리티
├── hooks/                 # 커스텀 훅
├── types/                 # 타입 정의
└── styles/               # 전역 스타일
```

### 네이밍 컨벤션
- 컴포넌트: PascalCase
- 파일: kebab-case
- 함수: camelCase
- 상수: UPPER_SNAKE_CASE

### 스타일링
- Tailwind CSS 클래스 순서:
  1. 레이아웃 (flex, grid, position)
  2. 크기 (width, height, padding, margin)
  3. 스타일 (background, border, shadow)
  4. 타이포그래피 (font, text)
  5. 상태 (hover, focus, active)

### 상태 관리
- 로컬 상태: useState
- 복잡한 상태: useReducer
- 전역 상태: Zustand

### API 통신
```typescript
interface ApiResponse<T> {
  data: T;
  status: number;
  message: string;
}

async function fetchData<T>(url: string): Promise<ApiResponse<T>> {
  // 구현
}
```

### 에러 처리
```typescript
try {
  // API 호출
} catch (error) {
  if (error instanceof Error) {
    // 타입 안전한 에러 처리
  }
}
```

### 성능 최적화
- 이미지: next/image 사용
- 폰트: next/font 사용
- 컴포넌트: React.memo 적절히 사용
- 페이지: dynamic import 사용

### 접근성
- 시맨틱 HTML 태그 사용
- ARIA 속성 적절히 사용
- 키보드 네비게이션 지원
- 색상 대비 준수

### Git 커밋
```
feat: 새로운 기능
fix: 버그 수정
docs: 문서 수정
style: 코드 포맷팅
refactor: 코드 리팩토링
test: 테스트 코드
chore: 빌드 업무 수정
```

### 환경 변수
- .env.local: 로컬 환경
- .env.development: 개발 환경
- .env.production: 프로덕션 환경
